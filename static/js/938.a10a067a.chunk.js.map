{"version":3,"file":"static/js/938.a10a067a.chunk.js","mappings":"2NAmBA,MAfA,SAAmBA,GACjB,OAAOC,EAAAA,EAAAA,IACA,sCAADC,OACoCF,EAAQ,qBAAAE,OALpC,qCAQXC,MAAK,SAAAC,GACJ,OAAOA,EAASC,IAClB,IACCC,OAAM,SAAAC,GAEL,MADAC,QAAQD,MAAM,eAAgBA,GACxBA,CACR,GACJ,E,SC4CA,MAzDA,WAEI,IAAAE,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACZI,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRC,EAAUH,GACLZ,MAAK,SAAAE,GACmB,IAArBA,EAAKQ,KAAKM,OACZX,QAAQD,MAAM,iBAEdO,EAAQT,EAAKQ,KAEjB,IACCP,OAAM,SAAAC,GACLC,QAAQD,MAAM,uBAAwBA,EACxC,GACJ,GAAG,CAACQ,KAIFK,EAAAA,EAAAA,MAAA,WAAAC,SAAA,CACmB,IAAhBR,EAAKM,SACJG,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yCAEJR,GACCA,EAAKU,KAAI,SAAAC,GACP,OACEF,EAAAA,EAAAA,KAAA,MAAkBG,UAAU,kBAAiBJ,UAC3CC,EAAAA,EAAAA,KAAA,MAAIG,UAAU,qBAAoBJ,UAChCD,EAAAA,EAAAA,MAAA,MAAIK,UAAU,aAAYJ,SAAA,EACxBC,EAAAA,EAAAA,KAAA,MAAIG,UAAU,gBAAeJ,SAC1BG,EAAKE,cACJJ,EAAAA,EAAAA,KAAA,OACEK,IAAG,kCAAAzB,OAAoCsB,EAAKE,cAC5CE,IAAG,GAAA1B,OAAKsB,EAAKK,WACbC,MAAM,SAGRR,EAAAA,EAAAA,KAAA,OACEK,IAAG,yDACHC,IAAG,GAAA1B,OAAKsB,EAAKK,WACbC,MAAM,WAIZR,EAAAA,EAAAA,KAAA,MAAAD,SAAKG,EAAKK,aACVP,EAAAA,EAAAA,KAAA,MAAAD,SAAKG,EAAKO,aAnBPP,EAAKQ,GAwBlB,MAGV,C","sources":["helpers/fetchCast.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '0561c0caa6894fc9c35e7bf8e6e31140';\n\nfunction fetchCast(movie_id) {\n  return axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movie_id}/credits?api_key=${API_KEY}`\n    )\n\n    .then(response => {\n      return response.data;\n    })\n    .catch(error => {\n      console.error('Fetch Error:', error);\n      throw error;\n    });\n}\n\nexport default fetchCast;\n","import { useState, useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport fetchCast from \"helpers/fetchCast\";\n\nfunction Cast() {\n\n    const [cast, setCast] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n      fetchCast(movieId)\n          .then(data => {\n          if (data.cast.length === 0) {\n            console.error('no cast found');\n          } else {\n            setCast(data.cast);\n          }\n        })\n        .catch(error => {\n          console.error('Error fetching cast:', error);\n        });\n    }, [movieId]);\n\n    return (\n\n      <section>\n        {cast.length === 0 && (\n          <p>We don't have information about cast</p>\n        )}\n        {cast &&\n          cast.map(item => {\n            return (\n              <ul key={item.id} className=\"actor_card_list\">\n                <li className=\"actor_card_element\">\n                  <ul className=\"actor_list\">\n                    <li className=\"actor_element\">\n                      {item.profile_path ? (\n                        <img\n                          src={`https://image.tmdb.org/t/p/w500${item.profile_path}`}\n                          alt={`${item.character}`}\n                          width=\"100\"\n                        />\n                      ) : (\n                        <img\n                          src={`http://dummyimage.com/100x150/99cccc.jpg&text=No+photo`}\n                          alt={`${item.character}`}\n                          width=\"100\"\n                        />\n                      )}\n                    </li>\n                    <li>{item.character}</li>\n                    <li>{item.name}</li>\n                  </ul>\n                </li>\n              </ul>\n            );\n          })}\n      </section>\n    );\n};\n\nexport default Cast; "],"names":["movie_id","axios","concat","then","response","data","catch","error","console","_useState","useState","_useState2","_slicedToArray","cast","setCast","movieId","useParams","useEffect","fetchCast","length","_jsxs","children","_jsx","map","item","className","profile_path","src","alt","character","width","name","id"],"sourceRoot":""}